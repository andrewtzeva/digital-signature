from gmpy2 import mpz, mpz_random, powmod, add, gcd
from hashlib import sha512
from random import randint

# p = 2q + 1, with p: 513 bits, q: 512 bits generated by get_random_primes() of param_gen.py
q, p = 7192508928170981990196796141181742044343359635131805796616854017385844777835834305451883405788653061923438588219640907074487763578078997476537377331460803, 14385017856341963980393592282363484088686719270263611593233708034771689555671668610903766811577306123846877176439281814148975527156157994953074754662921607

p, q = mpz(p), mpz(q)


# Finds generator of the subgroup of multiplicative Z_p of order q
def find_generator():
    gen = 1
    for elem in range(1, p):
        elem = mpz(elem)
        if powmod(elem, 2, p) != 1 and powmod(elem, q, p) !=1:
            gen = elem
            break
    m = 1

    for i in range(2, q):
        if gcd(q, i) == 1:
            m = i
            break

    return powmod(gen, 2*m, 1)


# Returns private key x and public components g, h
def get_keys():
    x = mpz(randint(0, q))
    g = find_generator()
    h = powmod(g, x, p)

    return x, g, h


# Converts z to hex with padding (leading zeros)
def to_hex(z):
    return '{0:0{1}x}'.format(z, 128)


# Hashes m = 'large_file.bin' and returns H(m)
def hash_file():
    BUF_SIZE = 65536
    sha = sha512()

    with open('large_file.bin', 'rb') as f:
        while True:
            data = f.read(BUF_SIZE)
            if not data:
                break
            sha.update(data)

    return sha.hexdigest()


# Returns c = H(y||H(m)) and signature s = t - cx (mod q)
def schnorr_sign(x, g):
    sha = sha512()
    t = mpz(randint(0, q))
    y = powmod(g, t, p)
    y_code = str(y).encode('ASCII')

    hashed_file = hash_file()
    print('m =', hashed_file)
    hashed_file = str(hashed_file).encode('ASCII')

    sha.update(y_code)
    sha.update(hashed_file)
    c = sha.hexdigest()

    c = mpz(int(c, 16))

    s = powmod(add(t, -c*x), 1, q)

    return c, s


# Verifies signature by checking if r = H(g^s*h^c||H(m)) equals c = H(y||H(m))
def verif(g, h, c, s):
    sha = sha512()
    z = powmod(g, s, 1) * powmod(h, c, 1)
    z = str(z).encode('ASCII')

    sha.update(z)

    hashed_file = str(hash_file()).encode('ASCII')

    sha.update(hashed_file)

    r = sha.hexdigest()

    c = to_hex(c)

    return r == c


# Testing
def main():
    x, g, h = get_keys()
    c, s = schnorr_sign(x, g)
    print('c = {}'.format(to_hex(c)))
    print('s = {}'.format(to_hex(s)))
    print('Verif: {}'.format(verif(g, h, c, s)))

    # Final Params
    m = 'a7d483bb9af2ca4b064420d1911d9116b6b609ca312fd7ed919fc1b8be7d1eb57c46f2a6f13380b6dc38f024d17442b4c7b8ecb8c121dc88227d588fc2e04297'
    c = '012d6ba73b36aaea9382ad913c94caf1c27ff1785975be73483bd97a6e4405c5f4e69d950be7c3b52912c88b5ee1679a6c5ced77c4b401966f5cd93402865e14'
    s = '47b9e0eaaa5eb41c7df4949223dd27ddeeb6b6d56d33538862e3c94a06be2fa878cf9d1993945b592bbd65d58c55fb5e74b3d0f716c9a2f4d9737e4d7b33df7b'

main()



